---
import IconMenuDeep from "@/assets/icons/IconMenuDeep.svg";

interface Props {
  headings: { depth: number; slug: string; text: string }[];
}

const { headings } = Astro.props;

// Filter for H2 only (main headings)
const mainHeadings = headings.filter(h => h.depth === 2);

// Don't render if too few headings
if (mainHeadings.length < 2) {
  throw new Error("Not enough headings for table of contents");
}
---

<!-- TOC Dropdown Button -->
<button
  id="toc-toggle"
  class:list={[
    "p-2 rounded-md transition-colors",
    "hover:bg-muted hover:text-accent",
    "focus-visible:outline-2 focus-visible:outline-accent",
  ]}
  aria-label="Toggle table of contents"
  aria-expanded="false"
  aria-controls="toc-menu"
>
  <IconMenuDeep class="size-5" />
</button>

<!-- TOC Dropdown Menu -->
<nav
  id="toc-menu"
  class:list={[
    "absolute right-0 top-full z-40 w-64 rounded-md bg-background border border-muted mt-2",
    "opacity-0 pointer-events-none transition-opacity duration-200",
    "max-h-96 overflow-y-auto shadow-lg",
  ]}
  aria-label="Table of contents"
>
  <ul class="space-y-0 text-sm">
    {mainHeadings.map((heading, index) => (
      <li>
        <a
          href={`#${heading.slug}`}
          class:list={[
            "block py-2 px-4 transition-colors text-foreground hover:bg-muted hover:text-accent no-underline",
            { "border-t border-muted": index > 0 },
          ]}
          data-toc-link={heading.slug}
        >
          {heading.text}
        </a>
      </li>
    ))}
  </ul>
</nav>

<script>
  {
    const tocToggle = document.getElementById("toc-toggle");
    const tocMenu = document.getElementById("toc-menu");

    if (!tocToggle || !tocMenu) return;

    let tocOpen = false;

    function closeToc() {
      tocOpen = false;
      tocMenu?.classList.add("opacity-0", "pointer-events-none");
      tocMenu?.classList.remove("opacity-100", "pointer-events-auto");
      tocToggle?.setAttribute("aria-expanded", "false");
    }

    function openToc() {
      tocOpen = true;
      tocMenu?.classList.remove("opacity-0", "pointer-events-none");
      tocMenu?.classList.add("opacity-100", "pointer-events-auto");
      tocToggle?.setAttribute("aria-expanded", "true");
    }

    // Toggle dropdown on button click
    tocToggle?.addEventListener("click", () => {
      tocOpen ? closeToc() : openToc();
    });

    // Close dropdown when clicking a link
    document.querySelectorAll("[data-toc-link]").forEach((link) => {
      link.addEventListener("click", () => {
        closeToc();
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (e) => {
      if (
        tocOpen &&
        e.target !== tocToggle &&
        !tocMenu?.contains(e.target as Node)
      ) {
        closeToc();
      }
    });

    // Active section tracking with Intersection Observer
    const links = document.querySelectorAll("[data-toc-link]");
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute("id");
          const link = document.querySelector(`[data-toc-link="${id}"]`);

          if (entry.isIntersecting) {
            // Remove active from all
            links.forEach((l) => {
              l.classList.remove("bg-muted", "text-accent");
            });
            // Add active to current
            if (link) {
              link.classList.add("bg-muted", "text-accent");
            }
          }
        });
      },
      { rootMargin: "-50% 0px -50% 0px" }
    );

    // Observe all heading elements
    document.querySelectorAll("h2[id], h3[id]").forEach((heading) => {
      observer.observe(heading);
    });

    // Close menu on page navigation
    document.addEventListener("astro:before-swap", closeToc);
  }
</script>

<style>
  nav#toc-menu {
    scrollbar-width: thin;
  }

  nav#toc-menu::-webkit-scrollbar {
    width: 4px;
  }

  nav#toc-menu::-webkit-scrollbar-track {
    background: transparent;
  }

  nav#toc-menu::-webkit-scrollbar-thumb {
    background: var(--muted);
    border-radius: 2px;
  }

  nav#toc-menu::-webkit-scrollbar-thumb:hover {
    background: var(--accent);
  }
</style>
